package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "net/http"
    "os"
)

func main() {
    // Replace with your actual API key and Portkey Gateway URL
    apiKey := os.Getenv("PORTKEY_API_KEY")
    baseURL := "https://api.portkey.ai/v1/chat/completions"

    // Example event payload
    event := map[string]string{
        "type":    "Warning",
        "reason":  "CrashLoopBackOff",
        "message": "Pod myapp-1234 in namespace default is in CrashLoopBackOff",
    }

    // Craft the prompt for Portkey
    body := map[string]interface{}{
        "messages": []map[string]string{
            {
                "role":    "user",
                "content": fmt.Sprintf("Kubernetes event:\nType: %s\nReason: %s\nMessage: %s\n\nWhat could be the root cause and how can I fix it?", event["type"], event["reason"], event["message"]),
            },
        },
        "model": "gpt-4",
    }

    jsonBody, err := json.Marshal(body)
    if err != nil {
        panic(err)
    }

    req, err := http.NewRequest("POST", baseURL, bytes.NewBuffer(jsonBody))
    if err != nil {
        panic(err)
    }

    req.Header.Set("Authorization", "Bearer "+apiKey)
    req.Header.Set("Content-Type", "application/json")

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        panic(err)
    }
    defer resp.Body.Close()

    fmt.Println("Status:", resp.Status)
    var result map[string]interface{}
    json.NewDecoder(resp.Body).Decode(&result)
    fmt.Printf("Response:\n%v\n", result)
}
